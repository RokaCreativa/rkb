/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Hook centralizado para gesti√≥n de modales en todo el dashboard
 * 
 * PORQU√â CR√çTICO: Implementa Mandamiento #6 (Separaci√≥n de Responsabilidades) extrayendo
 * toda la l√≥gica de modales de los componentes de presentaci√≥n
 * 
 * PROBLEMA RESUELTO: Sin este hook, DashboardView y MobileView tendr√≠an m√∫ltiples useState
 * para cada modal, creando c√≥digo duplicado y dif√≠cil de mantener
 * 
 * CONEXIONES CR√çTICAS:
 * - DashboardView.tsx l√≠nea ~25: const { modalState, openModal, closeModal, handleDeleteItem, handleConfirmDelete } = useModalState()
 * - MobileView.tsx l√≠nea ~40: const { openModal } = useModalState() (a trav√©s de ModalManager)
 * - EditModals.tsx: Todos los modales de edici√≥n reciben isOpen desde modalState.type
 * - DeleteConfirmationModal.tsx: Modal de confirmaci√≥n que usa handleConfirmDelete
 * 
 * ARQUITECTURA: Hook ‚Üí Store ‚Üí API ‚Üí UI (flujo unidireccional)
 * - Hook maneja UI state (qu√© modal est√° abierto)
 * - Store maneja business logic (llamadas a API)
 * - Componentes solo renderizan seg√∫n el estado
 * 
 * DECISI√ìN DE DISE√ëO: Un solo estado para todos los modales en lugar de m√∫ltiples useState
 * porque simplifica la l√≥gica y garantiza que solo un modal est√© abierto a la vez
 */
'use client';

import { useState } from 'react';
import { useDashboardStore } from '@/app/dashboard-v2/stores/dashboardStore';
import { Category, Section, Product } from '@/app/dashboard-v2/types';

type ModalType = 'editCategory' | 'editSection' | 'editProduct' | 'editProductDirect' | 'delete' | null;
type ModalData = Category | Section | Product | null;
type ItemType = 'category' | 'section' | 'product';

export const useModalState = () => {
    /**
     * üß≠ MIGA DE PAN CONTEXTUAL: Estado unificado para todos los modales del sistema
     * PORQU√â UN SOLO ESTADO: Garantiza que solo un modal est√© abierto a la vez (mejor UX)
     * ESTRUCTURA: { type, data, itemType } permite manejar diferentes modales con una sola variable
     * CONEXI√ìN: Este estado se lee en DashboardView para determinar qu√© modal renderizar
     */
    const [modalState, setModalState] = useState<{
        type: ModalType;
        data: ModalData;
        itemType?: ItemType;
    }>({ type: null, data: null });

    // üß≠ MIGA DE PAN: Conexi√≥n directa con store para operaciones de eliminaci√≥n
    // PORQU√â AQU√ç: El hook maneja la confirmaci√≥n UI, el store maneja la l√≥gica de negocio
    const { deleteCategory, deleteSection, deleteProduct } = useDashboardStore();

    /**
     * üß≠ MIGA DE PAN CONTEXTUAL: Funci√≥n para abrir cualquier modal del sistema
     * CONEXIONES CR√çTICAS:
     * - CategoryGridView.tsx: onEdit ‚Üí openModal('editCategory', category)
     * - SectionGridView.tsx: onEdit ‚Üí openModal('editSection', section)  
     * - ProductGridView.tsx: onEdit ‚Üí openModal('editProduct', product)
     * - FAB buttons: onAddNew ‚Üí openModal('editCategory', null) para crear nuevo
     * DECISI√ìN: data=null indica modo "crear", data!=null indica modo "editar"
     */
    const openModal = (type: ModalType, data: ModalData = null) => {
        setModalState({ type, data });
    };

    /**
     * üß≠ MIGA DE PAN CONTEXTUAL: Cierre universal de modales
     * CONEXIONES: Todos los modales reciben onClose={closeModal}
     * LIMPIEZA: Resetea completamente el estado para evitar datos residuales
     */
    const closeModal = () => {
        setModalState({ type: null, data: null });
    };

    /**
     * üß≠ MIGA DE PAN CONTEXTUAL: Preparaci√≥n para modal de confirmaci√≥n de eliminaci√≥n
     * PORQU√â DOS PASOS: 1) Abrir modal de confirmaci√≥n, 2) Usuario confirma ‚Üí eliminar
     * CONEXIONES: GridView.onDelete ‚Üí handleDeleteItem ‚Üí modal confirmaci√≥n ‚Üí handleConfirmDelete
     * PAR√ÅMETRO itemType: Necesario para saber qu√© funci√≥n de eliminaci√≥n llamar despu√©s
     */
    const handleDeleteItem = (item: ModalData, itemType: ItemType) => {
        openModal('delete', item);
        setModalState(prev => ({ ...prev, itemType }));
    };

    /**
     * üß≠ MIGA DE PAN CONTEXTUAL: Ejecuta eliminaci√≥n tras confirmaci√≥n del usuario
     * PORQU√â SWITCH: Diferentes entidades requieren diferentes funciones del store
     * CONEXI√ìN: DeleteConfirmationModal.onConfirm ‚Üí handleConfirmDelete
     * FLUJO COMPLETO: GridView ‚Üí handleDeleteItem ‚Üí modal ‚Üí handleConfirmDelete ‚Üí store.delete* ‚Üí API
     * LIMPIEZA: Cierra modal autom√°ticamente tras confirmar (UX fluida)
     */
    const handleConfirmDelete = () => {
        if (!modalState.data || !modalState.itemType) return;

        // Delegaci√≥n al store seg√∫n tipo de entidad
        switch (modalState.itemType) {
            case 'category':
                deleteCategory((modalState.data as Category).category_id);
                break;
            case 'section':
                deleteSection((modalState.data as Section).section_id);
                break;
            case 'product':
                deleteProduct((modalState.data as Product).product_id);
                break;
            default:
                break;
        }
        closeModal();
    };

    return {
        modalState,
        openModal,
        closeModal,
        handleDeleteItem,
        handleConfirmDelete,
    };
};
