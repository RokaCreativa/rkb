/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Hook para calcular layout CSS Grid de DashboardView
 * PORQU√â NECESARIO: Separar l√≥gica de layout de DashboardView.tsx para evitar tocar archivo cr√≠tico
 * PROBLEMA RESUELTO: Anomal√≠a visual donde categor√≠as "saltan" antes de posicionarse correctamente
 * CONEXIONES:
 * - DashboardView.tsx: Consumir√° este hook para obtener clases CSS correctas
 * - dashboardStore.ts: Lee selectedCategoryId y selectedSectionId para determinar layout
 * DECISI√ìN ARQUITECT√ìNICA: Layout siempre consistente - categor√≠as + secciones + productos opcionales
 */
'use client';

import { useDashboardStore } from '@/app/dashboard-v2/stores/dashboardStore';
import { useCategoryDisplayMode } from '@/app/dashboard-v2/stores/dashboardStore';

export const useDashboardLayout = () => {
    const selectedCategoryId = useDashboardStore(state => state.selectedCategoryId);
    const selectedSectionId = useDashboardStore(state => state.selectedSectionId);
    
    // üß≠ MIGA DE PAN: Auto-detecci√≥n T31 para determinar modo de categor√≠a
    // PORQU√â: Necesario para decidir si mostrar productos directos o secciones
    // CONEXI√ìN: useCategoryDisplayMode ‚Üí getCategoryDisplayMode ‚Üí auto-detecci√≥n
    const categoryDisplayMode = useCategoryDisplayMode(selectedCategoryId);

    /**
     * üß≠ MIGA DE PAN: L√≥gica de CSS Grid corregida para evitar saltos visuales
     * PROBLEMA RESUELTO: Antes el grid cambiaba din√°micamente causando "expansi√≥n hacia abajo"
     * SOLUCI√ìN: Layout consistente de 2-3 columnas cuando hay categor√≠a seleccionada
     * FLUJO: Sin selecci√≥n (1 col) ‚Üí Categor√≠a seleccionada (2 cols) ‚Üí Secci√≥n seleccionada (3 cols)
     */
    const getGridColsClass = () => {
        // Sin categor√≠a seleccionada: 1 columna (categor√≠as ocupan todo el ancho)
        if (!selectedCategoryId) {
            return '';
        }

        // Con categor√≠a seleccionada: siempre 2 columnas m√≠nimo (categor√≠as + secciones)
        // Con secci√≥n seleccionada: 3 columnas (categor√≠as + secciones + productos)
        return selectedSectionId ? 'lg:grid-cols-3' : 'lg:grid-cols-2';
    };

    /**
     * üß≠ MIGA DE PAN: Clases para columna de categor√≠as
     * PORQU√â: Cuando no hay categor√≠a seleccionada, debe ocupar todo el ancho
     */
    const getCategoryColClass = () => {
        return !selectedCategoryId ? 'lg:col-span-full' : '';
    };

    /**
     * üß≠ MIGA DE PAN: Determinar si mostrar columna de secciones
     * DECISI√ìN: Siempre mostrar cuando hay categor√≠a seleccionada (permite gesti√≥n)
     */
    const shouldShowSections = () => {
        return !!selectedCategoryId;
    };

    /**
     * üß≠ MIGA DE PAN: Determinar si mostrar columna de productos (T31 H√çBRIDO)
     * DECISI√ìN ACTUALIZADA: Mostrar productos en dos casos:
     * 1. Flujo tradicional: Cuando hay secci√≥n seleccionada
     * 2. Flujo T31: Cuando categor√≠a es "simple" (productos directos)
     * CONEXI√ìN: categoryDisplayMode determina si es simple o sections
     * PROBLEMA RESUELTO: Antes solo mostraba productos con secci√≥n, ahora tambi√©n con categor√≠a simple
     */
    const shouldShowProducts = () => {
        // Caso 1: Flujo tradicional - secci√≥n seleccionada
        if (selectedSectionId) return true;
        
        // Caso 2: Flujo T31 - categor√≠a simple con productos directos
        if (selectedCategoryId && categoryDisplayMode === 'simple') return true;
        
        return false;
    };

    return {
        gridColsClass: getGridColsClass(),
        categoryColClass: getCategoryColClass(),
        shouldShowSections: shouldShowSections(),
        shouldShowProducts: shouldShowProducts(),
    };
}; 