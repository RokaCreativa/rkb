/**
 * @fileoverview dashboardStore.ts - Store centralizado de Zustand para el estado del dashboard.
 * @description Este store es la √∫nica fuente de verdad para el dashboard.
 * Se ha restaurado su estado completo para dar servicio tanto a la vista m√≥vil como a la de escritorio,
 * y se ha corregido la l√≥gica CRUD para que sea robusta y segura en tipos.
 */
import { create } from 'zustand';
import React from 'react';
import { Category, Section, Product, Client } from '../types';
import { toast } from 'react-hot-toast';
import { getCategoryDisplayMode, isCategorySimpleMode } from '../utils/categoryUtils';

// --- INTERFACES ---

export interface DashboardState {
    client: Client | null;
    categories: Category[];
    sections: Record<string, Section[]>; // key: categoryId
    products: Record<string, Product[]>; // key: sectionId

    // Estados de carga y error
    isLoading: boolean;
    isClientLoading: boolean;
    isUpdating: boolean;
    error: string | null;
    initialDataLoaded: boolean;

    // Estado de UI para VISTA M√ìVIL
    activeView: 'categories' | 'sections' | 'products';
    activeCategoryId: number | null;
    activeSectionId: number | null;
    history: { view: 'categories' | 'sections' | 'products'; id: number | null }[];

    // Estado de UI para VISTA DE ESCRITORIO
    selectedCategoryId: number | null;
    selectedSectionId: number | null;
}

export interface DashboardActions {
    initializeDashboard: (clientId: number) => Promise<void>;
    fetchCategories: (clientId: number) => Promise<void>;
    fetchSectionsByCategory: (categoryId: number) => Promise<void>;
    fetchProductsBySection: (sectionId: number) => Promise<void>;
    fetchProductsByCategory: (categoryId: number) => Promise<void>;
    fetchDataForCategory: (categoryId: number) => Promise<void>;
    createCategory: (data: Partial<Category>, imageFile?: File | null) => Promise<void>;
    updateCategory: (id: number, data: Partial<Category>, imageFile?: File | null) => Promise<void>;
    deleteCategory: (id: number) => Promise<void>;
    toggleCategoryVisibility: (id: number, status: number) => Promise<void>;
    createSection: (data: Partial<Section>, imageFile?: File | null) => Promise<void>;
    updateSection: (id: number, data: Partial<Section>, imageFile?: File | null) => Promise<void>;
    deleteSection: (id: number) => Promise<void>;
    toggleSectionVisibility: (id: number, status: number) => Promise<void>;
    createProduct: (data: Partial<Product>, imageFile?: File | null) => Promise<void>;
    // üéØ T31: Nueva funci√≥n para crear productos directos en categor√≠as
    createProductDirect: (categoryId: number, data: Partial<Product>, imageFile?: File | null) => Promise<void>;
    updateProduct: (id: number, data: Partial<Product>, imageFile?: File | null) => Promise<void>;
    deleteProduct: (id: number) => Promise<void>;
    toggleProductVisibility: (id: number, status: number) => Promise<void>;
    setSelectedCategoryId: (id: number | null) => void;
    setSelectedSectionId: (id: number | null) => void;
    handleCategorySelect: (id: number) => void;
    handleSectionSelect: (id: number) => void;
    handleBack: () => void;
}

// --- ESTADO INICIAL ---

const initialState: DashboardState = {
    client: null,
    categories: [],
    sections: {},
    products: {},
    isLoading: false,
    isClientLoading: true,
    isUpdating: false,
    error: null,
    initialDataLoaded: false,
    activeView: 'categories',
    activeCategoryId: null,
    activeSectionId: null,
    history: [],
    selectedCategoryId: null,
    selectedSectionId: null,
};

// --- CREACI√ìN DEL STORE ---

export const useDashboardStore = create<DashboardState & DashboardActions>((set, get) => ({
    ...initialState,

    initializeDashboard: async (clientId) => {
        set({ isClientLoading: true, initialDataLoaded: false });
        try {
            const clientRes = await fetch(`/api/client?id=${clientId}`);
            if (!clientRes.ok) throw new Error('Cliente no encontrado');
            set({ client: await clientRes.json() });
            await get().fetchCategories(clientId);
        } catch (e) {
            set({ error: e instanceof Error ? e.message : 'Error' });
        } finally {
            set({ isClientLoading: false, initialDataLoaded: true });
        }
    },

    fetchCategories: async (clientId) => {
        set({ isLoading: true });
        try {
            const res = await fetch(`/api/categories?client_id=${clientId}`);
            if (!res.ok) throw new Error('Error al cargar categor√≠as');
            set({ categories: await res.json() });
        } catch (e) {
            set({ error: e instanceof Error ? e.message : 'Error' });
        } finally {
            set({ isLoading: false });
        }
    },

    fetchSectionsByCategory: async (categoryId) => {
        set({ isLoading: true });
        try {
            const res = await fetch(`/api/sections?category_id=${categoryId}`);
            if (!res.ok) throw new Error('Error al cargar secciones');
            const sectionsData = await res.json();
            set(state => ({ sections: { ...state.sections, [categoryId]: sectionsData } }));
        } catch (e) {
            set({ error: e instanceof Error ? e.message : 'Error' });
        } finally {
            set({ isLoading: false });
        }
    },

    fetchProductsBySection: async (sectionId) => {
        set({ isLoading: true });
        try {
            const res = await fetch(`/api/products?section_id=${sectionId}`);
            if (!res.ok) throw new Error('Error al cargar productos');
            const productsData = await res.json();
            set(state => ({ products: { ...state.products, [sectionId]: productsData } }));
        } catch (e) {
            set({ error: e instanceof Error ? e.message : 'Error' });
        } finally {
            set({ isLoading: false });
        }
    },

    fetchProductsByCategory: async (categoryId) => {
        // üß≠ MIGA DE PAN CONTEXTUAL: T31 - FUNCI√ìN CLAVE PARA PRODUCTOS H√çBRIDOS
        // PORQU√â MODIFICADA: Ahora carga productos H√çBRIDOS (tradicionales + directos) de una categor√≠a
        // PROBLEMA RESUELTO: Antes solo cargaba productos de categor√≠as "simples", ahora soporta T31
        // ARQUITECTURA: Usa API h√≠brida que combina productos de secciones + productos directos
        // CONEXIONES CR√çTICAS:
        // - /api/categories/[id]/products/route.ts: API modificada que obtiene productos h√≠bridos
        // - createProductDirect() l√≠nea 620: Recarga usando esta funci√≥n tras crear producto directo
        // - CategoryGridView.tsx: Renderizar√° productos directos + secciones usando esta data
        // - useCategoryProducts() l√≠nea 862: Hook que consume esta data para UI
        //
        // üéØ T31: FLUJO H√çBRIDO
        // 1. API consulta productos tradicionales (via secciones) + productos directos (via category_id)
        // 2. Elimina duplicados y ordena por display_order
        // 3. Retorna array unificado para mostrar en UI
        //
        // üí° Diferencia clave con fetchProductsBySection:
        // - fetchProductsBySection: usa section_id (jerarqu√≠a completa tradicional)
        // - fetchProductsByCategory: usa category_id (jerarqu√≠a h√≠brida T31)
        set({ isLoading: true });
        try {
            // T31: Usar API h√≠brida que obtiene productos tradicionales + directos
            // CONEXI√ìN: /api/categories/[id]/products/route.ts l√≠neas 15-45
            const res = await fetch(`/api/categories/${categoryId}/products`);
            if (!res.ok) throw new Error('Error al cargar productos h√≠bridos');
            const productsData = await res.json();
            
            // T31: Key especial para productos h√≠bridos de categor√≠a (diferente de secciones)
            // PORQU√â: Permite distinguir productos de categor√≠a vs productos de secci√≥n en el store
            // CONEXI√ìN: useCategoryProducts() l√≠nea 862 usa esta key para acceder a los datos
            set(state => ({ products: { ...state.products, [`cat-${categoryId}`]: productsData } }));
        } catch (e) {
            set({ error: e instanceof Error ? e.message : 'Error' });
        } finally {
            set({ isLoading: false });
        }
    },

    fetchDataForCategory: async (categoryId) => {
        // üß≠ MIGA DE PAN: Esta es la funci√≥n MAESTRA de auto-detecci√≥n inteligente (T32.1)
        // Decide autom√°ticamente si una categor√≠a debe usar jerarqu√≠a simple o completa:
        // 
        // üîç FLUJO DE AUTO-DETECCI√ìN:
        // 1. Carga las secciones de la categor√≠a
        // 2. Usa getCategoryDisplayMode() para determinar el modo
        // 3. Si es "simple" ‚Üí carga productos directos (fetchProductsByCategory)
        // 4. Si es "sections" ‚Üí mantiene secciones para navegaci√≥n posterior
        //
        // üéØ Se conecta con:
        // - DashboardView.tsx para renderizar UI adaptada al modo detectado
        // - MobileView.tsx para adaptar la navegaci√≥n m√≥vil
        // - CategoryGridView.tsx para mostrar productos o secciones seg√∫n el modo
        set({ isLoading: true });
        try {
            // Paso 1: Siempre cargar secciones primero para auto-detectar
            await get().fetchSectionsByCategory(categoryId);

            // Paso 2: Obtener las secciones cargadas y determinar el modo
            const sections = get().sections[categoryId] || [];
            const displayMode = getCategoryDisplayMode(sections);

            // Paso 3: Si es modo simple, cargar productos directos autom√°ticamente  
            if (displayMode === 'simple') {
                await get().fetchProductsByCategory(categoryId);
            }

            // Si es modo "sections", las secciones ya est√°n cargadas para navegaci√≥n posterior

        } catch (e) {
            set({ error: e instanceof Error ? e.message : 'Error al cargar datos de categor√≠a' });
        } finally {
            set({ isLoading: false });
        }
    },

    createCategory: async (data, imageFile) => {
        const toastId = 'crud-category';
        set({ isUpdating: true });
        toast.loading('Creando categor√≠a...', { id: toastId });
        try {
            const formData = new FormData();
            Object.entries(data).forEach(([key, value]) => {
                if (value !== null) formData.append(key, String(value));
            });
            if (imageFile) {
                formData.append('image', imageFile);
            }

            const res = await fetch('/api/categories', { method: 'POST', body: formData });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error);
            }

            const responseData = await res.json();
            toast.success('Categor√≠a creada', { id: toastId });

            const clientId = get().client?.id;
            if (clientId) await get().fetchCategories(clientId);
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    updateCategory: async (id, data, imageFile) => {
        // üß≠ MIGA DE PAN: Esta funci√≥n actualiza categor√≠as existentes siguiendo el mismo patr√≥n
        // que createCategory, pero usando PUT y un endpoint espec√≠fico por ID.
        // Se conecta con EditCategoryModal.tsx y CategoryForm.tsx para la edici√≥n desde ambas vistas.
        const toastId = `update-category-${id}`;
        set({ isUpdating: true });
        toast.loading('Actualizando categor√≠a...', { id: toastId });
        try {
            const formData = new FormData();
            formData.append('category_id', String(id));
            Object.entries(data).forEach(([key, value]) => {
                if (value !== null && key !== 'category_id') {
                    formData.append(key, String(value));
                }
            });
            if (imageFile) formData.append('image', imageFile);

            const res = await fetch('/api/categories', { method: 'PUT', body: formData });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error);
            }

            toast.success('Categor√≠a actualizada', { id: toastId });

            // Recargar categor√≠as para reflejar cambios en ambas vistas (m√≥vil y escritorio)
            const clientId = get().client?.id;
            if (clientId) await get().fetchCategories(clientId);
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    deleteCategory: async (id) => {
        /**
         * üß≠ MIGA DE PAN CONTEXTUAL: Eliminaci√≥n de categor√≠a con edge cases cr√≠ticos (FASE 4)
         * 
         * PORQU√â CR√çTICO: Implementa patr√≥n v0.dev de optimistic update + rollback completo
         * PROBLEMA RESUELTO: Antes no manejaba eliminaci√≥n en cascada ni rollback en caso de error
         * 
         * EDGE CASES MANEJADOS:
         * 1. Eliminaci√≥n en cascada: Limpia secciones y productos hijos autom√°ticamente
         * 2. Reseteo de selecciones: Evita estados inconsistentes en UI
         * 3. Rollback completo: Restaura estado previo si falla la operaci√≥n
         * 4. Navegaci√≥n coherente: Redirige a vista segura tras eliminaci√≥n
         * 
         * CONEXIONES CR√çTICAS:
         * - DeleteConfirmationModal.tsx: Modal que invoca esta funci√≥n
         * - CategoryGridView.tsx: Bot√≥n de eliminar que abre el modal
         * - DashboardView.tsx: Se actualiza autom√°ticamente tras eliminaci√≥n
         * - MobileView.tsx: Navegaci√≥n se resetea si elimina categor√≠a activa
         * 
         * PATR√ìN v0.dev: Optimistic update ‚Üí API call ‚Üí Rollback si falla
         * ARQUITECTURA: Mantiene consistencia de estado en todo momento
         */
        const toastId = `delete-category-${id}`;
        set({ isUpdating: true });
        toast.loading('Eliminando categor√≠a...', { id: toastId });
        
        // üß≠ MIGA DE PAN: Guardar estado completo para rollback (EDGE CASE CR√çTICO)
        // PORQU√â NECESARIO: Si falla la eliminaci√≥n, debemos restaurar TODO el estado previo
        // CONEXI√ìN: Este snapshot se usa en el catch para rollback completo
        const prevState = {
            categories: [...get().categories],
            sections: { ...get().sections },
            products: { ...get().products },
            selectedCategoryId: get().selectedCategoryId,
            selectedSectionId: get().selectedSectionId,
            activeCategoryId: get().activeCategoryId,
            activeSectionId: get().activeSectionId,
            activeView: get().activeView,
            history: [...get().history]
        };
        
        try {
            // üß≠ MIGA DE PAN: OPTIMISTIC UPDATE - Actualizar UI inmediatamente
            // PATR√ìN v0.dev: Usuario ve cambios instant√°neos, rollback si falla
            set(state => {
                // Eliminar categor√≠a del array
                const newCategories = state.categories.filter(cat => cat.category_id !== id);
                
                // üéØ EDGE CASE: Eliminaci√≥n en cascada de secciones hijas
                // PORQU√â CR√çTICO: Evita secciones hu√©rfanas en el estado
                const newSections = { ...state.sections };
                delete newSections[id]; // Eliminar todas las secciones de esta categor√≠a
                
                // üéØ EDGE CASE: Eliminaci√≥n en cascada de productos hijos
                // PROBLEMA RESUELTO: Productos directos (cat-${id}) y productos de secciones
                const newProducts = { ...state.products };
                delete newProducts[`cat-${id}`]; // Eliminar productos directos
                
                // Eliminar productos de secciones que pertenec√≠an a esta categor√≠a
                const sectionsToDelete = prevState.sections[id] || [];
                sectionsToDelete.forEach(section => {
                    delete newProducts[section.section_id];
                });
                
                // üéØ EDGE CASE: Reseteo inteligente de selecciones
                // CONEXI√ìN: Evita que DashboardView muestre contenido de categor√≠a eliminada
                let newSelectedCategoryId = state.selectedCategoryId;
                let newSelectedSectionId = state.selectedSectionId;
                let newActiveCategoryId = state.activeCategoryId;
                let newActiveSectionId = state.activeSectionId;
                let newActiveView = state.activeView;
                let newHistory = state.history;
                
                // Resetear selecciones de escritorio si se elimin√≥ la categor√≠a activa
                if (state.selectedCategoryId === id) {
                    newSelectedCategoryId = null;
                    newSelectedSectionId = null;
                }
                
                // üéØ EDGE CASE: Navegaci√≥n m√≥vil coherente tras eliminaci√≥n
                // PROBLEMA RESUELTO: Usuario queda en vista vac√≠a si elimina categor√≠a activa
                if (state.activeCategoryId === id) {
                    newActiveView = 'categories';
                    newActiveCategoryId = null;
                    newActiveSectionId = null;
                    newHistory = []; // Limpiar historial para evitar navegaci√≥n a categor√≠a eliminada
                }
                
                return {
                    ...state,
                    categories: newCategories,
                    sections: newSections,
                    products: newProducts,
                    selectedCategoryId: newSelectedCategoryId,
                    selectedSectionId: newSelectedSectionId,
                    activeCategoryId: newActiveCategoryId,
                    activeSectionId: newActiveSectionId,
                    activeView: newActiveView,
                    history: newHistory
                };
            });

            // üß≠ MIGA DE PAN: Llamada a API tras optimistic update
            // CONEXI√ìN: /api/categories/[id]/route.ts maneja eliminaci√≥n en cascada en servidor
            const res = await fetch(`/api/categories/${id}`, { method: 'DELETE' });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Error al eliminar categor√≠a');
            }

            toast.success('Categor√≠a eliminada', { id: toastId });

            // üß≠ MIGA DE PAN: Recargar datos para sincronizar con servidor
            // PORQU√â NECESARIO: Asegurar que contadores y relaciones est√©n actualizados
            const clientId = get().client?.id;
            if (clientId) await get().fetchCategories(clientId);
            
        } catch (e) {
            // üéØ EDGE CASE CR√çTICO: Rollback completo del estado
            // PATR√ìN v0.dev: Restaurar estado exacto previo a la operaci√≥n fallida
            // CONEXI√ìN: prevState capturado al inicio se restaura completamente
            set(prevState);
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    toggleCategoryVisibility: async (id, status) => {
        // üß≠ MIGA DE PAN: Esta funci√≥n alterna la visibilidad de categor√≠as usando el endpoint PATCH.
        // Se conecta con CategoryGridView.tsx y CategoryList.tsx para el bot√≥n "ojo" en ambas vistas.
        const toastId = `toggle-category-${id}`;
        set({ isUpdating: true });
        toast.loading('Actualizando visibilidad...', { id: toastId });
        try {
            const newStatus = status === 1 ? false : true;
            const res = await fetch(`/api/categories/${id}/visibility`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: newStatus })
            });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Error al actualizar visibilidad');
            }

            toast.success('Visibilidad actualizada', { id: toastId });

            // Recargar categor√≠as para reflejar cambios
            const clientId = get().client?.id;
            if (clientId) await get().fetchCategories(clientId);
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error desconocido', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    createSection: async (data, imageFile) => {
        // üß≠ MIGA DE PAN: Esta funci√≥n crea secciones siguiendo el patr√≥n exitoso de createCategory.
        // Se conecta con EditSectionModal.tsx y SectionForm.tsx desde ambas vistas.
        const toastId = 'crud-section';
        set({ isUpdating: true });
        toast.loading('Creando secci√≥n...', { id: toastId });

        console.log('üéØ createSection - Datos recibidos:', { data, hasImageFile: !!imageFile });

        try {
            const formData = new FormData();

            console.log('üéØ createSection - Procesando campos de data...');
            Object.entries(data).forEach(([key, value]) => {
                if (value !== null) {
                    console.log(`üéØ createSection - FormData: ${key} = ${value}`);
                    formData.append(key, String(value));
                }
            });

            if (imageFile) {
                console.log('üéØ createSection - A√±adiendo imagen:', imageFile.name);
                formData.append('image', imageFile);
            }

            console.log('üéØ createSection - Enviando request a /api/sections');
            const res = await fetch('/api/sections', { method: 'POST', body: formData });

            console.log('üéØ createSection - Response status:', res.status);

            if (!res.ok) {
                const errorData = await res.json();
                console.error('üéØ createSection - Error response:', errorData);
                throw new Error(errorData.error || errorData.message || 'Error al crear secci√≥n');
            }

            const responseData = await res.json();
            console.log('üéØ createSection - Success response:', responseData);

            toast.success('Secci√≥n creada', { id: toastId });

            // Recargar secciones de la categor√≠a activa/seleccionada
            const { activeCategoryId, selectedCategoryId } = get();
            const targetCategoryId = activeCategoryId || selectedCategoryId;
            console.log('üéØ createSection - Recargando secciones para categor√≠a:', targetCategoryId);

            if (targetCategoryId) await get().fetchSectionsByCategory(targetCategoryId);
        } catch (e) {
            console.error('üéØ createSection - Error completo:', e);
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    updateSection: async (id, data, imageFile) => {
        // üß≠ MIGA DE PAN: Actualiza secciones existentes usando PUT en el endpoint de secciones.
        // Se conecta con EditSectionModal.tsx para la edici√≥n desde ambas vistas.
        // IMPORTANTE: El endpoint PUT de secciones espera el campo 'id' (no 'section_id')
        const toastId = `update-section-${id}`;
        set({ isUpdating: true });
        toast.loading('Actualizando secci√≥n...', { id: toastId });
        try {
            const formData = new FormData();
            formData.append('id', String(id));
            Object.entries(data).forEach(([key, value]) => {
                if (value !== null && key !== 'id') {
                    formData.append(key, String(value));
                }
            });
            if (imageFile) formData.append('image', imageFile);

            const res = await fetch('/api/sections', { method: 'PUT', body: formData });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error);
            }

            toast.success('Secci√≥n actualizada', { id: toastId });

            // Recargar secciones de la categor√≠a activa
            const { activeCategoryId, selectedCategoryId } = get();
            const targetCategoryId = activeCategoryId || selectedCategoryId;
            if (targetCategoryId) await get().fetchSectionsByCategory(targetCategoryId);
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    deleteSection: async (id) => {
        /**
         * üß≠ MIGA DE PAN CONTEXTUAL: Eliminaci√≥n de secci√≥n con edge cases cr√≠ticos (FASE 4)
         * 
         * PORQU√â CR√çTICO: Implementa patr√≥n v0.dev con eliminaci√≥n en cascada de productos hijos
         * PROBLEMA RESUELTO: Antes no limpiaba productos hu√©rfanos ni manejaba rollback
         * 
         * EDGE CASES MANEJADOS:
         * 1. Eliminaci√≥n en cascada: Limpia productos hijos autom√°ticamente
         * 2. Reseteo de selecciones: Evita mostrar contenido de secci√≥n eliminada
         * 3. Rollback completo: Restaura estado si falla la operaci√≥n
         * 4. Navegaci√≥n coherente: Redirige a vista de secciones tras eliminaci√≥n
         * 
         * CONEXIONES CR√çTICAS:
         * - DeleteConfirmationModal.tsx: Modal que invoca esta funci√≥n
         * - SectionGridView.tsx: Bot√≥n de eliminar que abre el modal
         * - DashboardView.tsx: Columna de productos se oculta tras eliminaci√≥n
         * - MobileView.tsx: Navegaci√≥n se resetea si elimina secci√≥n activa
         * 
         * PATR√ìN v0.dev: Optimistic update ‚Üí API call ‚Üí Rollback si falla
         */
        const toastId = `delete-section-${id}`;
        set({ isUpdating: true });
        toast.loading('Eliminando secci√≥n...', { id: toastId });
        
        // üß≠ MIGA DE PAN: Snapshot completo para rollback (EDGE CASE CR√çTICO)
        const prevState = {
            sections: { ...get().sections },
            products: { ...get().products },
            selectedSectionId: get().selectedSectionId,
            activeSectionId: get().activeSectionId,
            activeView: get().activeView,
            history: [...get().history]
        };
        
        try {
            // üß≠ MIGA DE PAN: OPTIMISTIC UPDATE con eliminaci√≥n en cascada
            set(state => {
                const newSections = { ...state.sections };
                const newProducts = { ...state.products };
                
                // üéØ EDGE CASE: Eliminar secci√≥n de todas las categor√≠as
                // PORQU√â NECESARIO: sections es un Record<categoryId, Section[]>
                Object.keys(newSections).forEach(categoryId => {
                    newSections[categoryId] = newSections[categoryId].filter(
                        section => section.section_id !== id
                    );
                });
                
                // üéØ EDGE CASE: Eliminaci√≥n en cascada de productos hijos
                // PROBLEMA RESUELTO: Productos quedan hu√©rfanos si no se eliminan
                delete newProducts[id]; // Eliminar todos los productos de esta secci√≥n
                
                // üéØ EDGE CASE: Reseteo inteligente de selecciones
                let newSelectedSectionId = state.selectedSectionId;
                let newActiveSectionId = state.activeSectionId;
                let newActiveView = state.activeView;
                let newHistory = state.history;
                
                // Resetear selecciones de escritorio
                if (state.selectedSectionId === id) {
                    newSelectedSectionId = null;
                }
                
                // üéØ EDGE CASE: Navegaci√≥n m√≥vil coherente tras eliminaci√≥n
                if (state.activeSectionId === id) {
                    newActiveView = 'sections';
                    newActiveSectionId = null;
                    // Mantener historial para permitir navegaci√≥n hacia atr√°s
                }
                
                return {
                    ...state,
                    sections: newSections,
                    products: newProducts,
                    selectedSectionId: newSelectedSectionId,
                    activeSectionId: newActiveSectionId,
                    activeView: newActiveView,
                    history: newHistory
                };
            });

            // üß≠ MIGA DE PAN: Llamada a API tras optimistic update
            const res = await fetch(`/api/sections/${id}`, { method: 'DELETE' });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Error al eliminar secci√≥n');
            }

            toast.success('Secci√≥n eliminada', { id: toastId });

            // üß≠ MIGA DE PAN: Recargar datos para sincronizar contadores
            const { activeCategoryId, selectedCategoryId } = get();
            const targetCategoryId = activeCategoryId || selectedCategoryId;
            if (targetCategoryId) await get().fetchSectionsByCategory(targetCategoryId);
            
        } catch (e) {
            // üéØ EDGE CASE CR√çTICO: Rollback completo del estado
            set(prevState);
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    toggleSectionVisibility: async (id, status) => {
        // üß≠ MIGA DE PAN: Esta funci√≥n alterna la visibilidad de secciones usando el endpoint PATCH.
        // Se conecta con SectionGridView.tsx y SectionList.tsx para el bot√≥n "ojo" en ambas vistas.
        const toastId = `toggle-section-${id}`;
        set({ isUpdating: true });
        toast.loading('Actualizando visibilidad...', { id: toastId });
        try {
            const newStatus = status === 1 ? false : true;
            const res = await fetch(`/api/sections/${id}/visibility`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: newStatus })
            });
            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Error al actualizar visibilidad');
            }
            toast.success('Visibilidad actualizada', { id: toastId });

            // üß≠ MIGA DE PAN CONTEXTUAL: CR√çTICO - Actualizar tanto secciones como categor√≠as
            // PROBLEMA RESUELTO: Los contadores de visibilidad en categor√≠as no se actualizaban
            // PORQU√â NECESARIO: Las categor√≠as muestran "X/Y secciones visibles" y necesitan refrescarse
            // CONEXI√ìN: CategoryList.tsx l√≠nea ~52 muestra visible_sections_count/sections_count
            const { activeCategoryId, selectedCategoryId, client } = get();
            const targetCategoryId = selectedCategoryId || activeCategoryId;

            if (targetCategoryId) {
                // Recargar secciones de la categor√≠a para actualizar la lista
                await get().fetchSectionsByCategory(targetCategoryId);
            }

            // CR√çTICO: Recargar categor√≠as para actualizar contadores de visibilidad
            if (client?.id) {
                await get().fetchCategories(client.id);
            }
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error desconocido', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    createProduct: async (data, imageFile) => {
        // üß≠ MIGA DE PAN: Esta funci√≥n crea productos siguiendo el patr√≥n exitoso de createCategory.
        // Se conecta con EditProductModal.tsx y ProductForm.tsx desde ambas vistas.
        // IMPORTANTE: El endpoint POST requiere un campo 'sections' con array JSON de IDs.
        const toastId = 'crud-product';
        set({ isUpdating: true });
        toast.loading('Creando producto...', { id: toastId });
        try {
            const formData = new FormData();

            // El endpoint requiere array 'sections' en lugar de section_id individual
            const { activeSectionId, selectedSectionId } = get();
            const targetSectionId = data.section_id || activeSectionId || selectedSectionId;

            // A√±adir todos los campos excepto section_id
            Object.entries(data).forEach(([key, value]) => {
                if (value !== null && key !== 'section_id') {
                    formData.append(key, String(value));
                }
            });

            // A√±adir array de secciones como requiere el endpoint
            if (targetSectionId) {
                formData.append('sections', JSON.stringify([targetSectionId]));
            }

            if (imageFile) {
                formData.append('image', imageFile);
            }

            const res = await fetch('/api/products', { method: 'POST', body: formData });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error);
            }

            const responseData = await res.json();
            toast.success('Producto creado', { id: toastId });

            // Recargar productos de la secci√≥n activa/seleccionada
            if (targetSectionId) await get().fetchProductsBySection(targetSectionId);
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    // üéØ T31: NUEVA FUNCI√ìN - Crear producto directo en categor√≠a
    // PORQU√â: Implementa la propuesta de "relaciones opcionales" de Gemini
    // CONEXI√ìN: CategoryGridView ‚Üí FAB "A√±adir Producto" ‚Üí esta funci√≥n ‚Üí API modificada
    // FLUJO: Producto se crea directamente en categor√≠a sin secci√≥n intermedia
    // üß≠ MIGA DE PAN CONTEXTUAL: T31 - FUNCI√ìN CLAVE PARA PRODUCTOS DIRECTOS EN CATEGOR√çAS
    // PORQU√â EXISTE: Permite crear productos directamente en categor√≠as sin secciones intermedias
    // PROBLEMA RESUELTO: Categor√≠as simples como "BEBIDAS" no necesitan estructura "Refrescos > Coca Cola"
    // ARQUITECTURA: Implementa jerarqu√≠a flexible Category ‚Üí Product (vs tradicional Category ‚Üí Section ‚Üí Product)
    // CONEXIONES CR√çTICAS:
    // - CategoryGridView.tsx: FAB contextual llamar√° esta funci√≥n cuando detecte categor√≠a simple
    // - /api/products/route.ts l√≠neas 328-340: API modificada detecta category_id sin sections
    // - prisma/schema.prisma l√≠neas 60-63: Nueva relaci√≥n direct_products en categories
    // - fetchProductsByCategory() l√≠nea 280: Recarga productos h√≠bridos tras creaci√≥n
    // CASOS DE USO: Categor√≠as simples como "BEBIDAS" ‚Üí "Coca Cola" (sin secci√≥n)
    createProductDirect: async (categoryId: number, data: Partial<Product>, imageFile?: File | null) => {
        const toastId = 'crud-product-direct';
        set({ isUpdating: true });
        toast.loading('Creando producto directo...', { id: toastId });
        try {
            const formData = new FormData();

            // üéØ T31: MODO DIRECTO - Enviar category_id en lugar de sections
            // PORQU√â: La API modificada en /api/products/route.ts l√≠nea 328 detecta category_id sin sections
            // REGLA DE NEGOCIO: category_id y sections son mutuamente excluyentes en T31
            // FLUJO: FormData ‚Üí API ‚Üí Prisma.create({ category_id, section_id: null })
            formData.append('category_id', String(categoryId));

            // FILTRADO CR√çTICO: Excluir section_id y category_id para evitar conflictos
            // PORQU√â: section_id debe ser null para productos directos, category_id ya se a√±adi√≥ arriba
            Object.entries(data).forEach(([key, value]) => {
                if (value !== null && key !== 'section_id' && key !== 'category_id') {
                    formData.append(key, String(value));
                }
            });

            if (imageFile) {
                formData.append('image', imageFile);
            }

            // ENDPOINT REUTILIZADO: Usa misma API que createProduct() pero con l√≥gica adaptativa
            // CONEXI√ìN: /api/products/route.ts l√≠nea 436 - FLUJO comentado para diferenciar modos
            const res = await fetch('/api/products', { method: 'POST', body: formData });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error);
            }

            const responseData = await res.json();
            toast.success('Producto directo creado', { id: toastId });

            // üéØ T31: RECARGAR PRODUCTOS H√çBRIDOS - Tradicionales + Directos
            // PORQU√â CR√çTICO: La categor√≠a ahora puede tener productos directos que deben mostrarse
            // CONEXI√ìN: fetchProductsByCategory() l√≠nea 280 usa API h√≠brida /api/categories/[id]/products
            // FLUJO: Creaci√≥n ‚Üí Recarga ‚Üí CategoryGridView muestra productos directos + secciones
            // ARQUITECTURA: Mantiene consistencia con patr√≥n de recarga tras CRUD
            await get().fetchProductsByCategory(categoryId);
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    updateProduct: async (id, data, imageFile) => {
        // üß≠ MIGA DE PAN: Actualiza productos existentes usando PUT en el endpoint de productos.
        // Se conecta con EditProductModal.tsx para la edici√≥n desde ambas vistas.
        // IMPORTANTE: El endpoint PUT requiere product_id, section_id y client_id obligatorios
        const toastId = `update-product-${id}`;
        set({ isUpdating: true });
        toast.loading('Actualizando producto...', { id: toastId });
        try {
            const formData = new FormData();
            formData.append('product_id', String(id));

            // A√±adir campos requeridos por el endpoint
            const { activeSectionId, selectedSectionId, client } = get();
            const targetSectionId = activeSectionId || selectedSectionId;

            if (targetSectionId) formData.append('section_id', String(targetSectionId));
            if (client?.id) formData.append('client_id', String(client.id));

            Object.entries(data).forEach(([key, value]) => {
                if (value !== null && key !== 'product_id') {
                    formData.append(key, String(value));
                }
            });
            if (imageFile) formData.append('image', imageFile);

            const res = await fetch('/api/products', { method: 'PUT', body: formData });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || errorData.error || 'Error al actualizar producto');
            }

            toast.success('Producto actualizado', { id: toastId });

            // Recargar productos de la secci√≥n activa
            if (targetSectionId) await get().fetchProductsBySection(targetSectionId);
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    deleteProduct: async (id) => {
        /**
         * üß≠ MIGA DE PAN CONTEXTUAL: Eliminaci√≥n de producto con edge cases cr√≠ticos (FASE 4)
         * 
         * PORQU√â CR√çTICO: Maneja tanto productos tradicionales como productos directos (T31)
         * PROBLEMA RESUELTO: Antes no diferenciaba entre productos de secci√≥n vs productos directos
         * 
         * EDGE CASES MANEJADOS:
         * 1. Detecci√≥n autom√°tica: Identifica si es producto tradicional o directo
         * 2. Recarga inteligente: Usa fetchProductsBySection o fetchProductsByCategory seg√∫n tipo
         * 3. Rollback completo: Restaura estado si falla la operaci√≥n
         * 4. Actualizaci√≥n de contadores: Refresca contadores de secci√≥n/categor√≠a padre
         * 
         * CONEXIONES CR√çTICAS:
         * - DeleteConfirmationModal.tsx: Modal que invoca esta funci√≥n
         * - ProductGridView.tsx: Bot√≥n de eliminar que abre el modal
         * - CategoryGridView.tsx: Contadores se actualizan tras eliminaci√≥n
         * - SectionGridView.tsx: Contadores de productos se actualizan
         * 
         * PATR√ìN v0.dev: Optimistic update ‚Üí API call ‚Üí Rollback si falla
         * ARQUITECTURA T31: Maneja jerarqu√≠a h√≠brida (tradicional + directa)
         */
        const toastId = `delete-product-${id}`;
        set({ isUpdating: true });
        toast.loading('Eliminando producto...', { id: toastId });
        
        // üß≠ MIGA DE PAN: Snapshot para rollback (productos son hojas, snapshot m√≠nimo)
        const prevProducts = { ...get().products };
        
        try {
            // üß≠ MIGA DE PAN: OPTIMISTIC UPDATE - Eliminar producto inmediatamente
            set(state => {
                const newProducts = { ...state.products };
                
                // üéØ EDGE CASE: Eliminar de todas las listas (secciones + categor√≠as directas)
                // PORQU√â NECESARIO: Producto puede estar en products[sectionId] o products[`cat-${categoryId}`]
                Object.keys(newProducts).forEach(key => {
                    if (Array.isArray(newProducts[key])) {
                        newProducts[key] = newProducts[key].filter(
                            (product: Product) => product.product_id !== id
                        );
                    }
                });
                
                return { ...state, products: newProducts };
            });

            // üß≠ MIGA DE PAN: Llamada a API
            const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Error al eliminar producto');
            }

            toast.success('Producto eliminado', { id: toastId });

            // üéØ EDGE CASE: Recarga inteligente seg√∫n contexto (T31 h√≠brido)
            // PROBLEMA RESUELTO: Debe detectar si recargar productos de secci√≥n o categor√≠a
            const { activeCategoryId, selectedCategoryId, activeSectionId, selectedSectionId } = get();
            const targetCategoryId = selectedCategoryId || activeCategoryId;
            const targetSectionId = selectedSectionId || activeSectionId;

            if (targetCategoryId) {
                const sections = get().sections[targetCategoryId];
                const displayMode = getCategoryDisplayMode(sections || []);

                if (displayMode === 'simple') {
                    // üß≠ MIGA DE PAN: Producto directo eliminado, recargar productos de categor√≠a
                    await get().fetchProductsByCategory(targetCategoryId);
                } else if (targetSectionId) {
                    // üß≠ MIGA DE PAN: Producto tradicional eliminado, recargar productos de secci√≥n
                    await get().fetchProductsBySection(targetSectionId);
                }

                // üéØ EDGE CASE CR√çTICO: Actualizar contadores de secci√≥n/categor√≠a padre
                // PORQU√â NECESARIO: SectionGridView y CategoryGridView muestran contadores
                await get().fetchSectionsByCategory(targetCategoryId);
            }
            
        } catch (e) {
            // üéØ EDGE CASE: Rollback de productos
            set(state => ({ ...state, products: prevProducts }));
            toast.error(e instanceof Error ? e.message : 'Error', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    toggleProductVisibility: async (id, status) => {
        // üß≠ MIGA DE PAN: Esta funci√≥n alterna la visibilidad de productos usando el endpoint PATCH.
        // Se conecta con ProductGridView.tsx y ProductList.tsx para el bot√≥n "ojo" en ambas vistas.
        const toastId = `toggle-product-${id}`;
        set({ isUpdating: true });
        toast.loading('Actualizando visibilidad...', { id: toastId });
        try {
            const newStatus = status === 1 ? false : true;
            const res = await fetch(`/api/products/${id}/visibility`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: newStatus })
            });
            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.message || 'Error al actualizar visibilidad');
            }
            toast.success('Visibilidad actualizada', { id: toastId });

            // üß≠ MIGA DE PAN CONTEXTUAL: Refresco inteligente seg√∫n contexto de navegaci√≥n
            // PROBLEMA RESUELTO: Para categor√≠as simples, debe usar fetchProductsByCategory
            // CONEXI√ìN: useCategoryDisplayMode determina si es categor√≠a simple o compleja
            const { activeCategoryId, selectedCategoryId, activeSectionId, selectedSectionId } = get();
            const targetCategoryId = selectedCategoryId || activeCategoryId;
            const targetSectionId = selectedSectionId || activeSectionId;

            // Para categor√≠as simples, refrescar productos de categor√≠a
            if (targetCategoryId) {
                const sections = get().sections[targetCategoryId];
                const displayMode = getCategoryDisplayMode(sections || []);

                if (displayMode === 'simple') {
                    await get().fetchProductsByCategory(targetCategoryId);
                } else if (targetSectionId) {
                    await get().fetchProductsBySection(targetSectionId);
                }

                // CR√çTICO: Actualizar secciones para refrescar contadores de productos visibles
                // PORQU√â NECESARIO: Las secciones muestran "X/Y productos visibles" y necesitan refrescarse
                // CONEXI√ìN: SectionGridView.tsx y SectionListView.tsx muestran visible_products_count
                await get().fetchSectionsByCategory(targetCategoryId);
            }
        } catch (e) {
            toast.error(e instanceof Error ? e.message : 'Error desconocido', { id: toastId });
        } finally {
            set({ isUpdating: false });
        }
    },

    setSelectedCategoryId: (id) => {
        set({ selectedCategoryId: id, selectedSectionId: null });
        // üß≠ MIGA DE PAN CONTEXTUAL: Esta funci√≥n es el punto de entrada para navegaci√≥n en ESCRITORIO
        // PORQU√â: Se decidi√≥ separar la navegaci√≥n m√≥vil (handleCategorySelect) de la de escritorio (setSelectedCategoryId)
        // porque tienen flujos diferentes - escritorio usa master-detail, m√≥vil usa drill-down
        // CONEXIONES: Se conecta con DashboardView.tsx l√≠nea ~45 en CategoryGridView.onCategorySelect
        // DECISI√ìN ARQUITECT√ìNICA: Siempre limpia selectedSectionId para forzar re-selecci√≥n de secci√≥n
        // FLUJO: DashboardView ‚Üí CategoryGridView ‚Üí onClick ‚Üí setSelectedCategoryId ‚Üí fetchSectionsByCategory ‚Üí SectionGridView
        if (id) {
            get().fetchSectionsByCategory(id);
        }
    },
    setSelectedSectionId: (id) => set({ selectedSectionId: id }),

    handleCategorySelect: (id) => {
        // üß≠ MIGA DE PAN CONTEXTUAL: Funci√≥n EXCLUSIVA para navegaci√≥n m√≥vil en MobileView.tsx
        // PORQU√â DE LA DECISI√ìN: Se elimin√≥ la auto-detecci√≥n inteligente que causaba bugs de navegaci√≥n
        // donde algunas categor√≠as saltaban directamente a productos sin mostrar secciones
        // PROBLEMA RESUELTO: Antes usaba getCategoryDisplayMode() que clasificaba incorrectamente categor√≠as
        // CONEXIONES CR√çTICAS:
        // - MobileView.tsx l√≠nea ~75: handleCategorySelectWithAutoDetection ‚Üí handleCategorySelect
        // - CategoryList.tsx: onCategoryClick prop que recibe esta funci√≥n
        // - Historial: Se conecta con handleBack() para navegaci√≥n coherente
        // FLUJO GARANTIZADO: categories ‚Üí sections ‚Üí products (sin saltos)
        // ARQUITECTURA: Mantiene separaci√≥n clara entre navegaci√≥n m√≥vil/escritorio

        // Guardar estado actual en historial para navegaci√≥n coherente con handleBack()
        set(state => ({
            activeCategoryId: id,
            history: [...state.history, { view: state.activeView, id: state.activeCategoryId }]
        }));

        // DECISI√ìN: Siempre cargar secciones y ir a vista sections (navegaci√≥n tradicional)
        get().fetchSectionsByCategory(id);
        set({ activeView: 'sections' });
    },
    handleSectionSelect: (id) => {
        // üß≠ MIGA DE PAN CONTEXTUAL: Navegaci√≥n de secciones a productos en vista m√≥vil
        // CONEXIONES: MobileView.tsx ‚Üí SectionListView.tsx ‚Üí onSectionClick ‚Üí handleSectionSelect
        // PORQU√â: Guarda el estado en historial para que handleBack() funcione correctamente
        // FLUJO: sections view ‚Üí products view + carga productos de la secci√≥n espec√≠fica
        set(state => ({
            activeView: 'products',
            activeSectionId: id,
            history: [...state.history, { view: state.activeView, id: state.activeSectionId }]
        }));
        get().fetchProductsBySection(id);
    },
    handleBack: () => set(state => {
        // üß≠ MIGA DE PAN CONTEXTUAL: Navegaci√≥n hacia atr√°s en vista m√≥vil
        // PROBLEMA IDENTIFICADO: L√≥gica de navegaci√≥n incorrecta causaba "p√°gina vac√≠a"
        // FLUJO CORRECTO: products ‚Üí sections ‚Üí categories
        // CONEXIONES: MobileView.tsx l√≠nea ~240 en bot√≥n ArrowLeftIcon onClick

        // Si estamos en products, ir a sections (mantener categor√≠a activa)
        if (state.activeView === 'products') {
            return {
                ...state,
                activeView: 'sections',
                activeSectionId: null // Limpiar secci√≥n pero mantener categor√≠a
            };
        }

        // Si estamos en sections, ir a categories (limpiar todo)
        if (state.activeView === 'sections') {
            return {
                ...state,
                activeView: 'categories',
                activeCategoryId: null,
                activeSectionId: null
            };
        }

        // Si estamos en categories, no hacer nada (ya estamos en el nivel superior)
        return state;
    }),

}));

// --- FUNCIONES HELPER PARA AUTO-DETECCI√ìN ---

/**
 * üîç Hook para obtener el modo de visualizaci√≥n de una categor√≠a
 * 
 * @param categoryId - ID de la categor√≠a
 * @returns 'simple' | 'sections' | 'loading' | 'error'
 * 
 * üß≠ MIGA DE PAN: Esta funci√≥n helper se conecta con:
 * - CategoryGridView.tsx para renderizar UI condicional
 * - MobileView.tsx para adaptar navegaci√≥n
 * - DashboardView.tsx para mostrar diferentes vistas
 */
export const useCategoryDisplayMode = (categoryId: number | null) => {
    const sections = useDashboardStore(state =>
        categoryId ? state.sections[categoryId] : undefined
    );
    const isLoading = useDashboardStore(state => state.isLoading);
    const error = useDashboardStore(state => state.error);

    if (error) return 'error';
    if (isLoading || !sections) return 'loading';

    return getCategoryDisplayMode(sections);
};

/**
 * üîç Hook para obtener productos de una categor√≠a (tanto simple como compleja)
 * 
 * @param categoryId - ID de la categor√≠a
 * @returns productos seg√∫n el modo de la categor√≠a
 * 
 * üß≠ MIGA DE PAN: Esta funci√≥n helper unifica el acceso a productos:
 * - Para categor√≠as simples: obtiene de products[`cat-${categoryId}`]
 * - Para categor√≠as complejas: requiere sectionId adicional
 * - Se conecta con ProductGridView.tsx y listas de productos
 */
export const useCategoryProducts = (categoryId: number | null, sectionId?: number | null) => {
    const products = useDashboardStore(state => state.products);
    const displayMode = useCategoryDisplayMode(categoryId);

    if (!categoryId) return [];

    // Para categor√≠as simples, usar la key especial
    if (displayMode === 'simple') {
        return products[`cat-${categoryId}`] || [];
    }

    // Para categor√≠as complejas, usar sectionId tradicional
    if (displayMode === 'sections' && sectionId) {
        return products[sectionId] || [];
    }

    return [];
};

// --- üéØ T31.5 FASE 2: COMPUTED VALUES REACTIVOS (CONTADORES H√çBRIDOS) ---

/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Hook para contadores h√≠bridos inteligentes de categor√≠as
 * 
 * PORQU√â CR√çTICO: Implementa el patr√≥n de v0.dev para mostrar "Comidas (3 secciones, 2 directos)"
 * PROBLEMA RESUELTO: Antes solo mostraba contadores de secciones, ahora muestra informaci√≥n completa
 * 
 * ARQUITECTURA REACTIVA: Usa selectores derivados que se actualizan autom√°ticamente cuando:
 * - Se crean/eliminan secciones en la categor√≠a
 * - Se crean/eliminan productos directos en la categor√≠a  
 * - Se cambia la visibilidad de secciones/productos
 * 
 * CONEXIONES CR√çTICAS:
 * - CategoryGridView.tsx: Renderizar√° estos contadores en lugar de solo secciones
 * - dashboardStore.sections[categoryId]: Fuente de datos para secciones
 * - dashboardStore.products[`cat-${categoryId}`]: Fuente de datos para productos directos
 * - getCategoryDisplayMode(): Determina si mostrar contadores h√≠bridos o tradicionales
 * 
 * PATR√ìN v0.dev: Computed values que se recalculan autom√°ticamente sin re-renders innecesarios
 * OPTIMIZACI√ìN: useMemo interno evita rec√°lculos cuando los datos no cambian
 * 
 * @param categoryId - ID de la categor√≠a para calcular contadores
 * @returns Objeto con contadores detallados y modo de visualizaci√≥n
 */
export const useCategoryWithCounts = (categoryId: number | null) => {
    const sections = useDashboardStore(state => 
        categoryId ? state.sections[categoryId] : undefined
    );
    const directProducts = useDashboardStore(state => 
        categoryId ? state.products[`cat-${categoryId}`] : undefined
    );
    const isLoading = useDashboardStore(state => state.isLoading);

    return React.useMemo(() => {
        if (!categoryId || isLoading) {
            return {
                displayMode: 'loading' as const,
                sectionsCount: 0,
                visibleSectionsCount: 0,
                directProductsCount: 0,
                visibleDirectProductsCount: 0,
                totalProductsCount: 0,
                visibleProductsCount: 0,
                displayText: 'Cargando...'
            };
        }

        // üß≠ MIGA DE PAN: C√°lculos de secciones (jerarqu√≠a tradicional)
        const sectionsArray = sections || [];
        const sectionsCount = sectionsArray.length;
        const visibleSectionsCount = sectionsArray.filter(s => s.status === 1).length;

        // üß≠ MIGA DE PAN: C√°lculos de productos directos (T31 - jerarqu√≠a h√≠brida)
        const directProductsArray = directProducts || [];
        const directProductsCount = directProductsArray.length;
        const visibleDirectProductsCount = directProductsArray.filter(p => p.status === 1).length;

        // üß≠ MIGA DE PAN: Determinar modo de visualizaci√≥n usando l√≥gica existente
        const displayMode = getCategoryDisplayMode(sectionsArray);

        // üß≠ MIGA DE PAN: Calcular totales h√≠bridos (secciones + productos directos)
        // CONEXI√ìN: Estos totales se mostrar√°n en CategoryGridView como informaci√≥n contextual
        const totalProductsCount = sectionsArray.reduce((acc, section) => 
            acc + (section.products_count || 0), 0
        ) + directProductsCount;

        const visibleProductsCount = sectionsArray.reduce((acc, section) => 
            acc + (section.visible_products_count || 0), 0
        ) + visibleDirectProductsCount;

        // üß≠ MIGA DE PAN: Generar texto descriptivo inteligente seg√∫n el modo
        // PATR√ìN v0.dev: Texto contextual que ayuda al usuario a entender la estructura
        let displayText = '';
        
        if (displayMode === 'simple' && directProductsCount > 0) {
            // Categor√≠a simple con productos directos: "5 productos directos"
            displayText = `${directProductsCount} producto${directProductsCount !== 1 ? 's' : ''} directo${directProductsCount !== 1 ? 's' : ''}`;
        } else if (displayMode === 'sections' && sectionsCount > 0) {
            if (directProductsCount > 0) {
                // Categor√≠a h√≠brida: "3 secciones, 2 directos"
                displayText = `${sectionsCount} secci√≥n${sectionsCount !== 1 ? 'es' : ''}, ${directProductsCount} directo${directProductsCount !== 1 ? 's' : ''}`;
            } else {
                // Categor√≠a tradicional: "3 secciones"
                displayText = `${sectionsCount} secci√≥n${sectionsCount !== 1 ? 'es' : ''}`;
            }
        } else {
            // Categor√≠a vac√≠a
            displayText = 'Sin contenido';
        }

        return {
            displayMode,
            sectionsCount,
            visibleSectionsCount,
            directProductsCount,
            visibleDirectProductsCount,
            totalProductsCount,
            visibleProductsCount,
            displayText
        };
    }, [categoryId, sections, directProducts, isLoading]);
};
