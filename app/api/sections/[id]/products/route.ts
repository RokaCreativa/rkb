import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

const prisma = new PrismaClient();

/**
 * Maneja la solicitud GET para obtener todos los productos de una secci√≥n espec√≠fica
 * 
 * @param request - Objeto de solicitud HTTP
 * @param params - Par√°metros de la ruta, incluye el ID de la secci√≥n
 * @returns Respuesta HTTP con los productos de la secci√≥n solicitada
 */
// üß≠ [API] GET /api/sections/[id]/products
// üó∫Ô∏è **Ubicaci√≥n:** `app/api/sections/[id]/products/route.ts`
// üéØ **Prop√≥sito:** Obtener todos los productos v√°lidos (no eliminados) para una secci√≥n espec√≠fica.
// üîÑ **Flujo de Datos:**
// 1. Recibe el `sectionId` de la URL.
// 2. Valida que el `sectionId` sea un n√∫mero.
// 3. Verifica la sesi√≥n de autenticaci√≥n del usuario.
// 4. Busca la secci√≥n en la DB para asegurarse de que existe.
// 5. Recupera las relaciones `products_sections` para encontrar todos los productos vinculados.
// 6. Mapea las relaciones para obtener la lista de productos.
// 7. Filtra los productos para excluir aquellos marcados como `deleted: true`.
// 8. Ordena los productos restantes por `display_order`.
// 9. Devuelve la lista de productos en formato JSON.
// ‚ö°Ô∏è **Optimizaci√≥n:** El filtrado y ordenamiento se realizan en el servidor para minimizar la carga en el cliente.
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    // Obtener el ID de secci√≥n de los par√°metros de ruta
    const sectionId = parseInt(params.id);

    // Verificar que el ID de secci√≥n es un n√∫mero v√°lido
    if (isNaN(sectionId)) {
      return NextResponse.json(
        { error: 'ID de secci√≥n inv√°lido' },
        { status: 400 }
      );
    }

    // Verificar la sesi√≥n del usuario
    const session = await getServerSession(authOptions);

    if (!session) {
      return NextResponse.json(
        { error: 'No autorizado' },
        { status: 401 }
      );
    }

    // Buscar la secci√≥n para verificar que existe
    const section = await prisma.sections.findUnique({
      where: {
        section_id: sectionId
      }
    });

    if (!section) {
      return NextResponse.json(
        { error: 'Secci√≥n no encontrada' },
        { status: 404 }
      );
    }

    // Obtener todos los productos asociados a esta secci√≥n a trav√©s de la tabla de relaci√≥n
    const productRelations = await prisma.products_sections.findMany({
      where: {
        section_id: sectionId
      },
      include: {
        products: true
      }
    });

    // Extraer solo los productos de las relaciones
    const products = productRelations
      .map(relation => relation.products)
      // Filtrar para excluir productos eliminados
      .filter(product => !product.deleted);

    // Ordenar productos por su orden de visualizaci√≥n
    products.sort((a, b) => {
      const orderA = a.display_order || 999;
      const orderB = b.display_order || 999;
      return orderA - orderB;
    });

    // Devolver los productos encontrados
    return NextResponse.json(products);

  } catch (error) {
    console.error('Error al obtener productos de secci√≥n:', error);

    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
} 