/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Utilidades de Gesti√≥n de Im√°genes Centralizadas
 *
 * üìç UBICACI√ìN: utils/imageUtils.ts ‚Üí Utilidades de Im√°genes
 *
 * üéØ PORQU√â EXISTE:
 * Centraliza la l√≥gica de manejo de rutas de im√°genes y errores de carga para todas
 * las entidades del dashboard (categor√≠as, secciones, productos, clientes). Resuelve
 * inconsistencias en rutas de im√°genes y proporciona fallbacks robustos. Implementa
 * Mandamiento #3 (DRY) evitando duplicaci√≥n de l√≥gica de im√°genes.
 *
 * üîÑ FLUJO DE DATOS:
 * 1. Componente UI ‚Üí getImagePath(imagePath, type) ‚Üí ESTA FUNCI√ìN
 * 2. Normalizaci√≥n ‚Üí URL completa vs nombre archivo vs null
 * 3. Construcci√≥n ruta ‚Üí /images/{type}/{filename} si necesario
 * 4. Next.js Image ‚Üí src normalizada ‚Üí renderizado
 * 5. Error handling ‚Üí handleImageError() ‚Üí placeholder autom√°tico
 *
 * üîó CONEXIONES DIRECTAS:
 * - ENTRADA: GenericRow.tsx ‚Üí getImagePath() para todas las im√°genes
 * - ENTRADA: Todos los componentes con im√°genes ‚Üí import imageUtils
 * - SALIDA: Next.js Image component ‚Üí src optimizada
 * - ERROR: handleImageError() ‚Üí placeholder.png fallback
 * - TIPOS: 'categories' | 'sections' | 'products' | 'clients' | 'main_logo'
 *
 * üö® PROBLEMA RESUELTO (Bit√°cora #40 - Odisea de la Imagen):
 * - Antes: Rutas de im√°genes inconsistentes y errores de carga sin manejo
 * - Error: URLs rotas, placeholders no funcionando, bucles infinitos
 * - Soluci√≥n: Normalizaci√≥n centralizada + error handling robusto
 * - Beneficio: Im√°genes consistentes + fallbacks autom√°ticos
 * - Fecha: 2025-01-12 - Centralizaci√≥n gesti√≥n im√°genes
 *
 * üéØ CASOS DE USO REALES:
 * - imagePath: null ‚Üí '/images/placeholder.png'
 * - imagePath: 'logo.jpg' ‚Üí '/images/categories/logo.jpg'
 * - imagePath: '/images/custom/logo.jpg' ‚Üí '/images/custom/logo.jpg' (sin cambios)
 * - imagePath: 'https://cdn.example.com/logo.jpg' ‚Üí URL externa (sin cambios)
 * - Error de carga ‚Üí handleImageError() ‚Üí placeholder autom√°tico
 *
 * ‚ö†Ô∏è REGLAS DE NEGOCIO CR√çTICAS:
 * - getImagePath() SIEMPRE retorna string v√°lido (nunca null)
 * - URLs absolutas (/ o http) se devuelven sin modificar
 * - Solo nombres de archivo se construyen con /images/{type}/
 * - handleImageError() previene bucles infinitos con clase CSS
 * - Placeholder por defecto: '/images/placeholder.png'
 *
 * üîó DEPENDENCIAS CR√çTICAS:
 * - REQUIERE: Estructura de carpetas /images/{type}/ en public/
 * - REQUIERE: placeholder.png existente en /images/
 * - REQUIERE: Next.js Image component como consumidor
 * - ROMPE SI: tipos no coinciden con carpetas backend
 * - ROMPE SI: placeholder.png no existe
 *
 * üìä PERFORMANCE:
 * - Funciones puras ‚Üí sin efectos secundarios
 * - String operations ‚Üí O(1) para normalizaci√≥n
 * - Error handling ‚Üí previene re-renders por im√°genes rotas
 * - Next.js optimization ‚Üí aprovecha optimizaci√≥n autom√°tica
 *
 * üìñ MANDAMIENTOS RELACIONADOS:
 * - Mandamiento #3 (DRY): Centraliza l√≥gica de im√°genes en un lugar
 * - Mandamiento #8 (Calidad): Error handling robusto y predecible
 * - Mandamiento #6 (Consistencia): URLs uniformes en toda la app
 * - Mandamiento #7 (Separaci√≥n): Utilidades separadas de componentes UI
 */

/**
 * Utilidades para el manejo de im√°genes en dashboard
 * 
 * Este m√≥dulo implementa funciones para gestionar rutas de im√°genes y
 * manejar errores de carga de manera consistente siguiendo los principios
 * de arquitectura limpia.
 * 
 * @module dashboard/utils/imageUtils
 */

/**
 * Normaliza la ruta de una imagen para asegurar que siempre sea una URL v√°lida.
 * Si la ruta de la imagen ya es una URL completa (comienza con "http" o "/"),
 * la devuelve sin cambios. Si es solo un nombre de archivo, construye la ruta
 * completa usando el tipo de entidad (ej: /images/products/nombre.jpg).
 *
 * @param imagePath La ruta de la imagen desde la API (puede ser nombre o URL completa).
 * @param type El tipo de entidad ('categories', 'sections', 'products').
 * @returns Una URL de imagen siempre v√°lida para usar en el frontend.
 */
export const getImagePath = (imagePath: string | null | undefined, type: 'categories' | 'sections' | 'products' | 'clients' | 'main_logo'): string => {
  const placeholder = '/images/placeholder.png';

  if (!imagePath) {
    return placeholder;
  }

  // Si ya es una URL completa o una ruta absoluta, la devolvemos tal cual.
  if (imagePath.startsWith('http') || imagePath.startsWith('/')) {
    return imagePath;
  }

  // Si es solo un nombre de archivo, construimos la ruta.
  return `/images/${type}/${imagePath}`;
};

/**
 * Maneja errores al cargar im√°genes, estableciendo una imagen de marcador de posici√≥n
 * 
 * @param event Evento de error de la imagen
 */
export const handleImageError = (event: React.SyntheticEvent<HTMLImageElement, Event>): void => {
  const img = event.currentTarget;
  const currentSrc = img.src;

  // Prevenir bucles infinitos: si ya es un placeholder, no hacer nada
  if (currentSrc.includes('placeholder.png') || img.classList.contains('placeholder-image')) {
    console.warn('Placeholder image also failed to load, skipping replacement');
    return;
  }

  console.error('Error loading image:', currentSrc);
  img.src = '/images/placeholder.png';
  // A√±adir clases para indicar que es una imagen de reemplazo
  img.classList.add('placeholder-image');
}

/**
 * Obtiene la URL de logo de cliente
 * 
 * @param logoPath Ruta o nombre de la imagen del logo
 * @returns Ruta completa del logo
 */
export function getClientLogoPath(logoPath: string | null | undefined): string {
  if (!logoPath) return '/images/placeholder.png';
  return getImagePath(logoPath, 'clients');
}

/**
 * Obtiene la URL de logo principal de cliente
 * 
 * @param logoPath Ruta o nombre de la imagen del logo principal
 * @returns Ruta completa del logo principal
 */
export function getMainLogoPath(logoPath: string | null | undefined): string {
  if (!logoPath) return '/images/placeholder.png';
  return getImagePath(logoPath, 'main_logo');
} 