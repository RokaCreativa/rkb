/**
 * @fileoverview Tipos e interfaces centralizados para el dashboard v2
 * @author RokaMenu Team
 * @version 1.2.0
 * @updated 2024-06-15
 * 
 * Este archivo centraliza todos los tipos e interfaces utilizados en el dashboard v2,
 * re-export√°ndolos desde sus ubicaciones espec√≠ficas para mantener compatibilidad.
 */

/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Barrel File Central de Tipos del Dashboard
 *
 * üìç UBICACI√ìN: types/index.ts ‚Üí Punto Central de Exportaci√≥n de Tipos
 *
 * üéØ PORQU√â EXISTE:
 * Act√∫a como "barrel file" centralizando todas las exportaciones de tipos del dashboard.
 * Permite imports limpios desde una sola ubicaci√≥n y mantiene la arquitectura de tipos
 * organizada por dominio (domain/) y UI (ui/). Facilita refactorings futuros y
 * evita imports relativos complejos en toda la aplicaci√≥n.
 *
 * üîÑ FLUJO DE DATOS:
 * 1. Archivos de tipos espec√≠ficos ‚Üí definiciones en domain/ y ui/
 * 2. ESTE ARCHIVO ‚Üí re-exporta todo con export * from
 * 3. Componentes ‚Üí import { Category, Product } from '@/app/dashboard/types'
 * 4. TypeScript ‚Üí resoluci√≥n autom√°tica de tipos
 * 5. IDE ‚Üí autocompletado y type checking
 *
 * üîó CONEXIONES DIRECTAS:
 * - ENTRADA: domain/category.ts, domain/product.ts, domain/section.ts
 * - ENTRADA: domain/mixed.ts, domain/permissions.ts
 * - ENTRADA: ui/common.ts, ui/modals.ts
 * - SALIDA: TODOS los componentes del dashboard
 * - CONSUMIDORES: dashboardStore.ts, hooks/, components/
 *
 * üö® PROBLEMA RESUELTO (Bit√°cora #58 - Limpieza Masiva):
 * - Antes: Tipos duplicados en m√∫ltiples archivos
 * - Error: Imports inconsistentes desde rutas relativas complejas
 * - Soluci√≥n: Barrel file √∫nico con re-exportaciones centralizadas
 * - Beneficio: Imports limpios, mantenimiento simplificado
 * - Fecha: 2025-01-20 - Limpieza arquitect√≥nica masiva
 *
 * üéØ CASOS DE USO REALES:
 * - dashboardStore: import { Category, Product, Section } from '../types'
 * - Componentes: import { Category } from '@/app/dashboard/types'
 * - Hooks: import { ModalType, ItemType } from '@/app/dashboard/types'
 * - APIs: import { Product, Section } from '@/app/dashboard/types'
 *
 * ‚ö†Ô∏è REGLAS DE NEGOCIO CR√çTICAS:
 * - SOLO re-exportaciones (export * from), NUNCA definiciones aqu√≠
 * - Mantener separaci√≥n domain/ vs ui/ en comentarios
 * - NO duplicar exports entre archivos fuente
 * - Actualizar imports cuando se a√±adan nuevos archivos de tipos
 *
 * üîó DEPENDENCIAS CR√çTICAS:
 * - REQUIERE: Archivos de tipos en domain/ y ui/ existentes
 * - REQUIERE: Estructura de carpetas types/ mantenida
 * - ROMPE SI: Circular dependencies entre archivos de tipos
 * - ROMPE SI: Exports duplicados con mismo nombre
 *
 * üìä PERFORMANCE:
 * - Tree shaking ‚Üí solo imports usados en bundle final
 * - TypeScript ‚Üí resoluci√≥n r√°pida de tipos
 * - IDE ‚Üí autocompletado eficiente
 * - Build time ‚Üí compilaci√≥n optimizada
 *
 * üìñ MANDAMIENTOS RELACIONADOS:
 * - Mandamiento #3 (DRY): Evita duplicaci√≥n de imports
 * - Mandamiento #6 (Consistencia): Imports uniformes en toda la app
 * - Mandamiento #7 (Separaci√≥n): Tipos separados por responsabilidad
 * - Mandamiento #2 (Actualizaci√≥n): Refleja cambios en arquitectura
 */

// =================================================================
// üìç TIPOS DE DOMINIO - Entidades de Negocio
// =================================================================
export * from './domain/category';
export * from './domain/product';
export * from './domain/section';
export * from './domain/mixed';
export * from './domain/permissions';

// =================================================================
// üìç TIPOS DE UI - Estados y Componentes de Interfaz
// =================================================================
export * from './ui/common';
export * from './ui/modals'; 