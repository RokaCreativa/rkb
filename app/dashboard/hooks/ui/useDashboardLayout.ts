/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Hook de C√°lculo de Layout CSS Grid Dashboard
 *
 * üìç UBICACI√ìN: hooks/ui/useDashboardLayout.ts ‚Üí Hook de Layout Responsivo
 *
 * üéØ PORQU√â EXISTE:
 * Separa la l√≥gica compleja de c√°lculo de layout CSS Grid del DesktopMasterDetailView.
 * Resuelve el problema de "saltos visuales" donde las columnas cambiaban din√°micamente
 * causando experiencia de usuario inconsistente. Implementa layout predictivo que
 * mantiene consistencia visual durante navegaci√≥n.
 *
 * üîÑ FLUJO DE DATOS:
 * 1. useDashboardStore ‚Üí selectedCategoryId, selectedSectionId, sections
 * 2. getCategoryDisplayMode() ‚Üí determina si categor√≠a es simple/sections
 * 3. useMemo calculations ‚Üí clases CSS optimizadas
 * 4. DesktopMasterDetailView ‚Üí consume clases para grid layout
 * 5. CSS Grid ‚Üí renderizado visual consistente
 *
 * üîó CONEXIONES DIRECTAS:
 * - ENTRADA: useDashboardStore ‚Üí estado de selecciones
 * - ENTRADA: getCategoryDisplayMode() ‚Üí utils/categoryUtils
 * - SALIDA: DesktopMasterDetailView.tsx ‚Üí clases CSS grid
 * - L√ìGICA: Layout 1‚Üí2‚Üí3 columnas seg√∫n selecciones
 *
 * üö® PROBLEMA RESUELTO (Bit√°cora #44):
 * - Antes: Grid din√°mico causaba "expansi√≥n hacia abajo" visual
 * - Error: Categor√≠as "saltaban" al cambiar n√∫mero de columnas
 * - Soluci√≥n: Layout consistente 2-3 columnas cuando categor√≠a seleccionada
 * - Beneficio: Experiencia visual fluida y predecible
 * - Fecha: 2025-01-15 - Optimizaci√≥n layout dashboard
 *
 * üéØ CASOS DE USO REALES:
 * - Sin selecci√≥n ‚Üí 1 columna (categor√≠as full width)
 * - Categor√≠a seleccionada ‚Üí 2 columnas (categor√≠as + secciones)
 * - Secci√≥n seleccionada ‚Üí 3 columnas (categor√≠as + secciones + productos)
 * - Categor√≠a simple T31 ‚Üí 3 columnas (categor√≠as + secciones + productos directos)
 *
 * ‚ö†Ô∏è REGLAS DE NEGOCIO CR√çTICAS:
 * - Layout NUNCA retrocede (solo 1‚Üí2‚Üí3, nunca 3‚Üí1 directo)
 * - selectedCategoryId: null ‚Üí 1 columna completa
 * - selectedCategoryId: present ‚Üí m√≠nimo 2 columnas
 * - selectedSectionId: present ‚Üí 3 columnas
 * - categoryDisplayMode: 'simple' ‚Üí 3 columnas (T31)
 *
 * üîó DEPENDENCIAS CR√çTICAS:
 * - REQUIERE: useDashboardStore con selecciones actualizadas
 * - REQUIERE: getCategoryDisplayMode() utility function
 * - REQUIERE: DesktopMasterDetailView como consumidor
 * - ROMPE SI: selectedCategoryId inconsistente con sections data
 * - ROMPE SI: CSS Grid classes no definidas en Tailwind
 *
 * üìä PERFORMANCE:
 * - useMemo ‚Üí re-calcula solo cuando selecciones cambian
 * - CSS Grid ‚Üí hardware accelerated layout
 * - Layout predictivo ‚Üí evita reflows innecesarios
 * - Clases est√°ticas ‚Üí optimizaci√≥n Tailwind CSS
 *
 * üìñ MANDAMIENTOS RELACIONADOS:
 * - Mandamiento #7 (Separaci√≥n): L√≥gica layout separada de componente UI
 * - Mandamiento #6 (Consistencia): Layout uniforme y predecible
 * - Mandamiento #5 (Mobile-First): Responsive design con lg: breakpoints
 * - Mandamiento #1 (Contexto): Mantiene estado visual coherente
 */
'use client';

import { useMemo } from 'react';
import { useDashboardStore } from '@/app/dashboard/stores/dashboardStore';
import { getCategoryDisplayMode } from '../../utils/categoryUtils';

export const useDashboardLayout = () => {
    const selectedCategoryId = useDashboardStore(state => state.selectedCategoryId);
    const selectedSectionId = useDashboardStore(state => state.selectedSectionId);
    const sections = useDashboardStore(state => state.sections);

    const categoryDisplayMode = useMemo(() => {
        if (!selectedCategoryId) return 'none';
        const categorySections = sections[selectedCategoryId] || [];
        return getCategoryDisplayMode(categorySections);
    }, [selectedCategoryId, sections]);

    /**
     * üß≠ MIGA DE PAN: L√≥gica de CSS Grid corregida para evitar saltos visuales
     * PROBLEMA RESUELTO: Antes el grid cambiaba din√°micamente causando "expansi√≥n hacia abajo"
     * SOLUCI√ìN: Layout consistente de 2-3 columnas cuando hay categor√≠a seleccionada
     * FLUJO: Sin selecci√≥n (1 col) ‚Üí Categor√≠a seleccionada (2 cols) ‚Üí Secci√≥n seleccionada (3 cols)
     */
    const getGridColsClass = () => {
        // Sin categor√≠a seleccionada: 1 columna (categor√≠as ocupan todo el ancho)
        if (!selectedCategoryId) {
            return '';
        }

        // Con categor√≠a seleccionada: siempre 2 columnas m√≠nimo (categor√≠as + secciones)
        // Con secci√≥n seleccionada: 3 columnas (categor√≠as + secciones + productos)
        return selectedSectionId ? 'lg:grid-cols-3' : 'lg:grid-cols-2';
    };

    /**
     * üß≠ MIGA DE PAN: Clases para columna de categor√≠as
     * PORQU√â: Cuando no hay categor√≠a seleccionada, debe ocupar todo el ancho
     */
    const getCategoryColClass = () => {
        return !selectedCategoryId ? 'lg:col-span-full' : '';
    };

    /**
     * üß≠ MIGA DE PAN: Determinar si mostrar columna de secciones
     * DECISI√ìN: Siempre mostrar cuando hay categor√≠a seleccionada (permite gesti√≥n)
     */
    const shouldShowSections = () => {
        return !!selectedCategoryId;
    };

    /**
     * üß≠ MIGA DE PAN: Determinar si mostrar columna de productos (T31 H√çBRIDO)
     * DECISI√ìN ACTUALIZADA: Mostrar productos en dos casos:
     * 1. Flujo tradicional: Cuando hay secci√≥n seleccionada
     * 2. Flujo T31: Cuando categor√≠a es "simple" (productos directos)
     * CONEXI√ìN: categoryDisplayMode determina si es simple o sections
     * PROBLEMA RESUELTO: Antes solo mostraba productos con secci√≥n, ahora tambi√©n con categor√≠a simple
     */
    const shouldShowProducts = () => {
        // Caso 1: Flujo tradicional - secci√≥n seleccionada
        if (selectedSectionId) return true;

        // Caso 2: Flujo T31 - categor√≠a simple con productos directos
        if (selectedCategoryId && categoryDisplayMode === 'simple') return true;

        return false;
    };

    return {
        gridColsClass: getGridColsClass(),
        categoryColClass: getCategoryColClass(),
        shouldShowSections: shouldShowSections(),
        shouldShowProducts: shouldShowProducts(),
    };
}; 