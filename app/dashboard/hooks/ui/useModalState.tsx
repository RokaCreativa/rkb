/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Hook Centralizado para Gesti√≥n de Modales Unificado
 *
 * üìç UBICACI√ìN: hooks/ui/useModalState.tsx ‚Üí Hook Principal de Modales
 *
 * üéØ PORQU√â EXISTE:
 * Implementa el sistema de modales unificado (T36 completado) extrayendo toda la l√≥gica
 * de estado de los modales fuera de los componentes de presentaci√≥n. Garantiza que solo
 * un modal pueda estar abierto a la vez y centraliza toda la l√≥gica CRUD de modales.
 * Cumple Mandamiento #7 (Separaci√≥n de Responsabilidades).
 *
 * üîÑ FLUJO DE DATOS:
 * 1. Componente UI ‚Üí openModal(type, options) ‚Üí ESTE HOOK
 * 2. modalState actualizado ‚Üí componente re-renderiza modal apropiado
 * 3. Modal ‚Üí handleSave() | handleConfirmDelete() ‚Üí dashboardStore actions
 * 4. Store action completa ‚Üí closeModal() ‚Üí modal se cierra autom√°ticamente
 * 5. UI actualizada ‚Üí nueva data visible sin modal
 *
 * üîó CONEXIONES DIRECTAS:
 * - ENTRADA: DesktopMasterDetailView.tsx ‚Üí openModal() llamadas
 * - ENTRADA: MobileDrillDownView.tsx ‚Üí openModal() llamadas  
 * - SALIDA: EditModalComponents.tsx ‚Üí consume modalState
 * - SALIDA: DeleteConfirmationModalComponent.tsx ‚Üí consume modalState
 * - STORE: useDashboardStore ‚Üí todas las actions CRUD (l√≠nea 44-47)
 *
 * üö® PROBLEMA RESUELTO (Bit√°cora #36):
 * - Antes: L√≥gica de modales duplicada en m√∫ltiples componentes
 * - Error: Estado inconsistente, m√∫ltiples modales abiertos simult√°neamente
 * - Soluci√≥n: Hook centralizado con estado √∫nico y actions unificadas
 * - Beneficio: C√≥digo DRY, comportamiento consistente, f√°cil debugging
 * - Fecha: 2025-01-10 - Sistema modales unificado completado
 *
 * üéØ CASOS DE USO REALES:
 * - Crear categor√≠a ‚Üí openModal('editCategory', {}) ‚Üí modo creaci√≥n
 * - Editar producto ‚Üí openModal('editProduct', {item: product}) ‚Üí modo edici√≥n
 * - Eliminar secci√≥n ‚Üí openModal('deleteConfirmation', {item: section, type: 'section'})
 * - Producto directo ‚Üí openModal('editProduct', {isDirect: true, parentId: categoryId})
 *
 * ‚ö†Ô∏è REGLAS DE NEGOCIO CR√çTICAS:
 * - options.item = null/undefined ‚Üí MODO CREACI√ìN
 * - options.item con datos ‚Üí MODO EDICI√ìN
 * - Solo UN modal abierto a la vez (modalState.type controla)
 * - closeModal() autom√°tico en handleSave() exitoso
 * - NO cerrar modal en error (permite correcci√≥n)
 *
 * üîó DEPENDENCIAS CR√çTICAS:
 * - REQUIERE: useDashboardStore con todas las actions CRUD
 * - REQUIERE: EditModalComponents + DeleteConfirmationModalComponent
 * - REQUIERE: Tipos Category, Section, Product desde types/
 * - ROMPE SI: dashboardStore actions fallan sin toast
 * - ROMPE SI: modalState no se resetea correctamente
 *
 * üìä PERFORMANCE:
 * - useState local ‚Üí re-renders m√≠nimos, solo cuando modal cambia
 * - Lazy modal rendering ‚Üí solo renderiza modal activo
 * - Actions memoizadas ‚Üí no re-crean funciones en cada render
 * - Error handling ‚Üí no bloquea UI en fallos de API
 *
 * üìñ MANDAMIENTOS RELACIONADOS:
 * - Mandamiento #7 (Separaci√≥n): L√≥gica aqu√≠, UI en componentes "tontos"
 * - Mandamiento #3 (DRY): Elimina duplicaci√≥n de l√≥gica modal
 * - Mandamiento #6 (Consistencia): Comportamiento modal uniforme
 * - Mandamiento #1 (Contexto): Mantiene estado coherente entre vistas
 */
'use client';

import { useState } from 'react';
import { useDashboardStore } from '../../stores/dashboardStore';
import { Category, Section, Product } from '../../types';

// --- TIPOS EXPORTADOS (CORREGIDO: Se exporta ItemType) ---
export type ModalType =
    | 'editCategory'
    | 'editSection'
    | 'editProduct'
    | 'deleteConfirmation'
    | null;
export type ItemType = 'category' | 'section' | 'product';
type ModalData = Category | Section | Product | null;

export interface ModalOptions {
    item?: ModalData;
    type?: ItemType;
    isDirect?: boolean;
    isGlobal?: boolean;
    parentId?: number;
}

interface FullModalState {
    type: ModalType;
    options: ModalOptions;
}

// CONTRATO EXPL√çCITO: Definiendo el tipo de retorno del hook
export interface UseModalStateReturn {
    modalState: FullModalState;
    openModal: (type: ModalType, options?: ModalOptions) => void;
    closeModal: () => void;
    handleConfirmDelete: () => void;
    handleSave: (formData: { data: Partial<any>; imageFile?: File | null }) => Promise<void>;
}

export const useModalState = (): UseModalStateReturn => {
    const [modalState, setModalState] = useState<FullModalState>({
        type: null,
        options: {},
    });

    const {
        deleteCategory, deleteSection, deleteProduct,
        createCategory, updateCategory,
        createSection, updateSection,
        createProduct, updateProduct
    } = useDashboardStore();

    const openModal = (type: ModalType, options: ModalOptions = {}) => {
        setModalState({ type, options });
    };

    const closeModal = () => {
        setModalState({ type: null, options: {} });
    };

    const handleConfirmDelete = () => {
        const { item, type } = modalState.options;
        if (!item || !type) return;

        switch (type) {
            case 'category':
                deleteCategory((item as Category).category_id);
                break;
            case 'section':
                deleteSection((item as Section).section_id);
                break;
            case 'product':
                deleteProduct((item as Product).product_id);
                break;
        }
        closeModal();
    };

    const handleSave = async (formData: { data: Partial<any>; imageFile?: File | null }) => {
        const { item, type } = modalState.options;
        if (!type) return;

        const { data, imageFile } = formData;
        const isEditing = !!item;

        try {
            switch (type) {
                case 'category':
                    if (isEditing) await updateCategory((item as Category).category_id, data, imageFile);
                    else await createCategory(data, imageFile);
                    break;
                case 'section':
                    if (isEditing) await updateSection((item as Section).section_id, data, imageFile);
                    else await createSection(data, imageFile);
                    break;
                case 'product':
                    if (isEditing) await updateProduct((item as Product).product_id, data, imageFile);
                    else await createProduct(data, imageFile);
                    break;
            }
            closeModal(); // Cierra el modal en caso de √©xito
        } catch (error) {
            // El toast de error ya lo muestra la acci√≥n del store.
            // No cerramos el modal para que el usuario pueda corregir.
            console.error("Error en handleSave:", error);
        }
    };

    return {
        modalState,
        openModal,
        closeModal,
        handleConfirmDelete,
        handleSave,
    };
};
