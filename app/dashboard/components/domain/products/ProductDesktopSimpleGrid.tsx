/**
 * üß≠ MIGA DE PAN CONTEXTUAL: Grid Simple de Productos (Columna 3)
 *
 * üìç UBICACI√ìN: components/domain/products/ProductDesktopSimpleGrid.tsx ‚Üí Grid Columna 3
 *
 * üéØ PORQU√â EXISTE:
 * Implementa la Columna 3 del dashboard desktop mostrando productos de una secci√≥n espec√≠fica.
 * Representa el nivel m√°s profundo de la jerarqu√≠a del men√∫ (Categor√≠as ‚Üí Secciones ‚Üí Productos).
 * Es un componente "tonto" que renderiza lista simple de productos sin mezclas, delegando
 * toda la l√≥gica a callbacks del DesktopMasterDetailView.
 *
 * üîÑ FLUJO DE DATOS:
 * 1. DesktopMasterDetailView ‚Üí useMemo(grid3Items) ‚Üí ESTE COMPONENTE
 * 2. products[] simple ‚Üí GenericRow por cada producto
 * 3. showcaseIcon ‚Üí onToggleShowcase ‚Üí store action
 * 4. Actions ‚Üí onEdit, onDelete, onToggleVisibility ‚Üí store actions
 * 5. isSectionSelected ‚Üí controla estado vac√≠o vs lista productos
 *
 * üîó CONEXIONES DIRECTAS:
 * - ENTRADA: DesktopMasterDetailView.tsx ‚Üí grid3Items + callbacks
 * - SALIDA: GenericRow.tsx ‚Üí renderizado individual productos
 * - FEATURE: showcaseIcon ‚Üí √∫nica acci√≥n espec√≠fica de productos
 * - STATE: isSectionSelected ‚Üí determina si mostrar contenido
 *
 * üö® PROBLEMA RESUELTO (Bit√°cora #58 - Limpieza Masiva):
 * - Antes: Estilos y l√≥gica de fila hardcodeados, inconsistencia visual
 * - Error: Duplicaci√≥n de c√≥digo con otros grids
 * - Soluci√≥n: Adopci√≥n de GenericRow para consistencia visual
 * - Beneficio: Alineaci√≥n visual con otros grids + c√≥digo DRY
 * - Fecha: 2025-01-20 - Unificaci√≥n componentes UI
 *
 * üéØ CASOS DE USO REALES:
 * - Sin secci√≥n seleccionada ‚Üí mensaje "Selecciona una secci√≥n..."
 * - Secci√≥n vac√≠a ‚Üí mensaje "No hay productos en esta secci√≥n"
 * - Lista productos ‚Üí GenericRow con showcase star + actions
 * - Toggle showcase ‚Üí estrella amarilla filled/unfilled
 * - A√±adir producto ‚Üí bot√≥n disabled si no isSectionSelected
 *
 * ‚ö†Ô∏è REGLAS DE NEGOCIO CR√çTICAS:
 * - isSectionSelected: true REQUERIDO para mostrar contenido
 * - onToggleShowcase: √öNICA acci√≥n espec√≠fica de este grid
 * - showcaseIcon: star amarilla, filled si is_showcased
 * - Bot√≥n a√±adir: disabled si no hay secci√≥n seleccionada
 * - onClick producto ‚Üí abre modal edici√≥n directamente
 *
 * üîó DEPENDENCIAS CR√çTICAS:
 * - REQUIERE: Product type desde types/domain/product
 * - REQUIERE: GenericRow component para renderizado
 * - REQUIERE: ActionIcon components para acciones
 * - REQUIERE: isSectionSelected para estado correcto
 * - ROMPE SI: onToggleShowcase callback undefined
 * - ROMPE SI: products[] contiene tipos incorrectos
 *
 * üìä PERFORMANCE:
 * - Lista simple ‚Üí sin derivaciones complejas como otros grids
 * - GenericRow memoized ‚Üí re-renders m√≠nimos
 * - showcaseIcon lazy ‚Üí solo renderiza cuando hover
 * - Conditional rendering ‚Üí estado vac√≠o eficiente
 *
 * üìñ MANDAMIENTOS RELACIONADOS:
 * - Mandamiento #7 (Separaci√≥n): Componente "tonto", l√≥gica en padre
 * - Mandamiento #3 (DRY): Reutiliza GenericRow como otros grids
 * - Mandamiento #6 (Consistencia): Visual uniforme con Columnas 1 y 2
 * - Mandamiento #8 (Calidad): C√≥digo mantenible y reutilizable
 */

'use client';

import React, { useCallback, useMemo } from 'react';
import { Product } from '@/app/dashboard/types';
import { Star, Pencil, Trash, Move, Plus, Eye, EyeOff } from 'lucide-react';
import { cn } from '@/lib/utils';
import { GenericRow } from '@/app/dashboard/components/ui/Table/GenericRow';
import { Button } from '@/app/dashboard/components/ui/Button/Button';
import { ActionIcon } from '../../ui/Button/ActionIcon';
import { useDashboardStore } from '@/app/dashboard-v2/stores/dashboardStore';

import { ArrowUp, ArrowDown } from 'lucide-react';

interface ProductGridViewProps {
    products: Product[];
    title: string;
    onToggleVisibility: (item: Product) => void;
    onToggleShowcase: (productId: number) => Promise<void>;
    onEdit: (item: Product) => void;
    onDelete: (item: Product) => void;
    onAddNew: () => void;
    isSectionSelected: boolean;
}

export const ProductGridView: React.FC<ProductGridViewProps> = ({
    products,
    title,
    onToggleVisibility,
    onToggleShowcase,
    onEdit,
    onDelete,
    onAddNew,
    isSectionSelected,
}) => {

    const renderActions = (product: Product) => (
        <div className="flex items-center">
            <ActionIcon Icon={product.status ? Eye : EyeOff} onClick={(e: React.MouseEvent) => { e.stopPropagation(); onToggleVisibility(product); }} />
            <ActionIcon Icon={Pencil} onClick={(e: React.MouseEvent) => { e.stopPropagation(); onEdit(product); }} />
            <ActionIcon Icon={Trash} onClick={(e: React.MouseEvent) => { e.stopPropagation(); onDelete(product); }} className="hover:text-red-600" />
        </div>
    );

    const renderShowcaseIcon = (product: Product) => (
        <ActionIcon
            Icon={Star}
            onClick={e => {
                e.stopPropagation();
                onToggleShowcase(product.product_id);
            }}
            aria-label={
                product.is_showcased ? 'Quitar de destacados' : 'Marcar como destacado'
            }
            iconClassName={cn(
                'transition-all text-gray-600',
                product.is_showcased
                    ? 'text-yellow-400 fill-yellow-400'
                    : 'hover:text-yellow-400',
            )}
        />
    );

    return (
        <div className="p-4 bg-white rounded-lg shadow-soft h-full flex flex-col">
            <div className="flex justify-between items-center mb-4 flex-shrink-0">
                <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
                <Button onClick={onAddNew} size="sm" disabled={!isSectionSelected}>
                    <Plus className="w-4 h-4 mr-2" />
                    A√±adir Producto
                </Button>
            </div>
            <div className="space-y-2 overflow-y-auto flex-grow">
                {!isSectionSelected ? (
                    <div className="text-center py-10 flex items-center justify-center h-full">
                        <p className="text-gray-500">Selecciona una secci√≥n para ver sus productos.</p>
                    </div>
                ) : products.length === 0 ? (
                    <div className="text-center py-10 flex items-center justify-center h-full">
                        <p className="text-gray-500">No hay productos en esta secci√≥n.</p>
                    </div>
                ) : (
                    products.map((product, index) => {
                        const subtitle = [
                            product.price ? `$${Number(product.price).toFixed(2)}` : null,
                            product.description
                        ].filter(Boolean).join(' - ');

                        return (
                            <GenericRow
                                key={product.product_id}
                                id={product.product_id}
                                isSelected={false}
                                imageSrc={product.image}
                                imageAlt={product.name ?? 'Producto'}
                                imageType="products"
                                title={product.name}
                                subtitle={subtitle}
                                status={product.status}
                                actions={renderActions(product)}
                                showcaseIcon={renderShowcaseIcon(product)}
                                onClick={() => onEdit(product)}
                            />
                        );
                    })
                )}
            </div>
        </div>
    );
};

ProductGridView.displayName = 'ProductGridView';